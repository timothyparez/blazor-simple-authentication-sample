@page "/authentication/{action}"
@inject AuthenticationStateProvider AuthenticationService
@inject NavigationManager Navigation

@* <RemoteAuthenticatorView Action="@Action" /> *@


@if (Action == "login")
{
    <Login/>
}


@code{
    [Parameter] public string? Action { get; set; }

        protected override Task OnInitializedAsync()
        {
            Console.WriteLine("InitializedAsync");
            return base.OnInitializedAsync();
        }

        protected override Task OnAfterRenderAsync(bool firstRender)
        {
            Console.WriteLine($"OnAfterRenderAsync({firstRender}: {Action})");
            return base.OnAfterRenderAsync(firstRender);
        }

        protected override async Task OnParametersSetAsync()
        {
            switch (Action)
            {
                case "logout":
                    await ((CustomAuthenticationService)AuthenticationService).SignOutAsync();
                    Navigation.NavigateTo($"authentication/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");                                        
                    break;                
                default:
                    break;
            }            
        }
}
